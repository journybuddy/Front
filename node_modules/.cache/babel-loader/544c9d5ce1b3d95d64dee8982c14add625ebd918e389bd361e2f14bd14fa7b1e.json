{"ast":null,"code":"var _jsxFileName = \"C:\\\\journey\\\\front\\\\buddy_front\\\\src\\\\components\\\\KaKaoRedirect.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { useLocation, useNavigate } from 'react-router-dom';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst KakaoRedirect = () => {\n  _s();\n  const [status, setStatus] = useState('로그인 중입니다.');\n  const backendUrl = process.env.REACT_APP_BACKEND_URL;\n  const [isLoading, setIsLoading] = useState(true); // 로딩 상태를 추가\n  const location = useLocation();\n  const navigate = useNavigate();\n  const queryParams = new URLSearchParams(location.search);\n  const code = queryParams.get('code'); // 인가코드 추출\n\n  useEffect(() => {\n    const sendCodeToBackend = async () => {\n      try {\n        if (code && backendUrl) {\n          const response = await axios.post(`${backendUrl}/api/auth/kakao?code=${code}`);\n          //localStorage.setItem('code', code);\n          console.log('Response status:', response.status);\n          const jwtToken = response.data.result;\n          localStorage.setItem('jwtToken', jwtToken);\n          console.log('JWT Token saved:', jwtToken); // 토큰이 올바르게 저장되었는지 확인\n          setStatus('로그인 성공');\n\n          // 약간의 지연을 추가하여 페이지가 빨리 지나가지 않도록 합니다.\n          setTimeout(() => {\n            setIsLoading(false);\n            navigate('/userinfo');\n          }, 2000); // 2초 지연\n        } else {\n          console.error('Authorization code or backend URL not found.');\n          setStatus('로그인 실패: 인가 코드 또는 백엔드 URL을 찾을 수 없습니다.');\n        }\n      } catch (error) {\n        if (axios.isAxiosError(error)) {\n          var _error$response;\n          console.error('Error details:', (_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data);\n        } else {\n          console.error('Unexpected error:', error);\n        }\n        setStatus('로그인 실패: 서버와의 통신 오류');\n      }\n    };\n    sendCodeToBackend();\n  }, [code, backendUrl, navigate]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      children: status\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this), isLoading && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"spinner\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 21\n    }, this), \" \"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 5\n  }, this);\n};\n_s(KakaoRedirect, \"8vYoIcyLBIK/T4aYtYox3RcSRwo=\", false, function () {\n  return [useLocation, useNavigate];\n});\n_c = KakaoRedirect;\nexport default KakaoRedirect;\nvar _c;\n$RefreshReg$(_c, \"KakaoRedirect\");","map":{"version":3,"names":["React","useEffect","useState","useLocation","useNavigate","axios","jsxDEV","_jsxDEV","KakaoRedirect","_s","status","setStatus","backendUrl","process","env","REACT_APP_BACKEND_URL","isLoading","setIsLoading","location","navigate","queryParams","URLSearchParams","search","code","get","sendCodeToBackend","response","post","console","log","jwtToken","data","result","localStorage","setItem","setTimeout","error","isAxiosError","_error$response","children","fileName","_jsxFileName","lineNumber","columnNumber","className","_c","$RefreshReg$"],"sources":["C:/journey/front/buddy_front/src/components/KaKaoRedirect.tsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { useLocation, useNavigate } from 'react-router-dom';\r\nimport axios from 'axios';\r\n\r\nconst KakaoRedirect: React.FC = () => {\r\n  const [status, setStatus] = useState('로그인 중입니다.');\r\n  const backendUrl = process.env.REACT_APP_BACKEND_URL;\r\n  const [isLoading, setIsLoading] = useState(true); // 로딩 상태를 추가\r\n  const location = useLocation();\r\n  const navigate = useNavigate();\r\n  const queryParams = new URLSearchParams(location.search);\r\n  const code = queryParams.get('code'); // 인가코드 추출\r\n \r\n  useEffect(() => {\r\n    const sendCodeToBackend = async () => {\r\n      try {\r\n        if (code && backendUrl) {\r\n          const response = await axios.post(`${backendUrl}/api/auth/kakao?code=${code}`);\r\n          //localStorage.setItem('code', code);\r\n          console.log('Response status:', response.status);\r\n          \r\n          const jwtToken = response.data.result;\r\n          localStorage.setItem('jwtToken', jwtToken);\r\n          console.log('JWT Token saved:', jwtToken); // 토큰이 올바르게 저장되었는지 확인\r\n          setStatus('로그인 성공');\r\n          \r\n          // 약간의 지연을 추가하여 페이지가 빨리 지나가지 않도록 합니다.\r\n          setTimeout(() => {\r\n            setIsLoading(false);\r\n            navigate('/userinfo');\r\n          }, 2000); // 2초 지연\r\n\r\n        } else {\r\n          console.error('Authorization code or backend URL not found.');\r\n          setStatus('로그인 실패: 인가 코드 또는 백엔드 URL을 찾을 수 없습니다.');\r\n        }\r\n      } catch (error) {\r\n        if (axios.isAxiosError(error)) {\r\n          console.error('Error details:', error.response?.data);\r\n        } else {\r\n          console.error('Unexpected error:', error);\r\n        }\r\n        setStatus('로그인 실패: 서버와의 통신 오류');\r\n      }\r\n    };\r\n    sendCodeToBackend();\r\n  }, [code, backendUrl, navigate]);\r\n\r\n  return (\r\n    <div>\r\n      <p>{status}</p>\r\n      {isLoading && <div className=\"spinner\"></div>} {/* 로딩 상태일 때만 spinner 표시 */}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default KakaoRedirect;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}