{"ast":null,"code":"var _jsxFileName = \"C:\\\\journey\\\\front\\\\buddy_front\\\\src\\\\components\\\\KaKaoRedirect.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst KakaoRedirect = () => {\n  _s();\n  const [status, setStatus] = useState('로그인 중입니다.');\n  const backendUrl = process.env.REACT_APP_BACKEND_URL;\n  const location = useLocation();\n  useEffect(() => {\n    const queryParams = new URLSearchParams(location.search);\n    const code = queryParams.get('code');\n    const sendCodeToBackend = async () => {\n      if (code && backendUrl) {\n        // POST 요청을 보내서 백엔드에서 JWT 토큰을 요청합니다.\n        const response = await axios.post(`${backendUrl}/api/auth/kakao`, null, {\n          params: {\n            code\n          }\n        });\n        console.log('Server response:', response.data);\n\n        // JWT 토큰을 받아서 상태를 업데이트합니다.\n        if (response.data.jwtToken) {\n          localStorage.setItem('jwtToken', response.data.jwtToken);\n          setStatus('로그인 성공!');\n        } else {\n          setStatus(response.data.message || '로그인 실패.');\n        }\n      } else {\n        console.error('Authorization code or backend URL not found.');\n        setStatus('인증 코드 또는 백엔드 URL을 찾을 수 없습니다.');\n      }\n    };\n    sendCodeToBackend();\n  }, [location.search, backendUrl]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      children: status\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"spinner\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 5\n  }, this);\n};\n_s(KakaoRedirect, \"l2eDc1UXVvUcTWEIbCXrgVf8B2Y=\", false, function () {\n  return [useLocation];\n});\n_c = KakaoRedirect;\nexport default KakaoRedirect;\nvar _c;\n$RefreshReg$(_c, \"KakaoRedirect\");","map":{"version":3,"names":["React","useEffect","useState","useLocation","axios","jsxDEV","_jsxDEV","KakaoRedirect","_s","status","setStatus","backendUrl","process","env","REACT_APP_BACKEND_URL","location","queryParams","URLSearchParams","search","code","get","sendCodeToBackend","response","post","params","console","log","data","jwtToken","localStorage","setItem","message","error","children","fileName","_jsxFileName","lineNumber","columnNumber","className","_c","$RefreshReg$"],"sources":["C:/journey/front/buddy_front/src/components/KaKaoRedirect.tsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { useLocation } from 'react-router-dom';\r\nimport axios from 'axios';\r\n\r\nconst KakaoRedirect = () => {\r\n  const [status, setStatus] = useState('로그인 중입니다.');\r\n  const backendUrl = process.env.REACT_APP_BACKEND_URL;\r\n  const location = useLocation();\r\n\r\n  useEffect(() => {\r\n    const queryParams = new URLSearchParams(location.search);\r\n    const code = queryParams.get('code');\r\n\r\n    const sendCodeToBackend = async () => {\r\n    \r\n        if (code && backendUrl) {\r\n          // POST 요청을 보내서 백엔드에서 JWT 토큰을 요청합니다.\r\n          const response = await axios.post(`${backendUrl}/api/auth/kakao`, null, {\r\n            params: { code }\r\n          });\r\n          console.log('Server response:', response.data);\r\n\r\n          // JWT 토큰을 받아서 상태를 업데이트합니다.\r\n          if (response.data.jwtToken) {\r\n            localStorage.setItem('jwtToken', response.data.jwtToken);\r\n            setStatus('로그인 성공!');\r\n          } else {\r\n            setStatus(response.data.message || '로그인 실패.');\r\n          }\r\n        } else {\r\n          console.error('Authorization code or backend URL not found.');\r\n          setStatus('인증 코드 또는 백엔드 URL을 찾을 수 없습니다.');\r\n        }\r\n     \r\n    };\r\n\r\n    sendCodeToBackend();\r\n  }, [location.search, backendUrl]);\r\n\r\n  return (\r\n    <div>\r\n      <p>{status}</p>\r\n      <div className=\"spinner\"></div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default KakaoRedirect;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SAASC,WAAW,QAAQ,kBAAkB;AAC9C,OAAOC,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,MAAMC,aAAa,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC1B,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGR,QAAQ,CAAC,WAAW,CAAC;EACjD,MAAMS,UAAU,GAAGC,OAAO,CAACC,GAAG,CAACC,qBAAqB;EACpD,MAAMC,QAAQ,GAAGZ,WAAW,CAAC,CAAC;EAE9BF,SAAS,CAAC,MAAM;IACd,MAAMe,WAAW,GAAG,IAAIC,eAAe,CAACF,QAAQ,CAACG,MAAM,CAAC;IACxD,MAAMC,IAAI,GAAGH,WAAW,CAACI,GAAG,CAAC,MAAM,CAAC;IAEpC,MAAMC,iBAAiB,GAAG,MAAAA,CAAA,KAAY;MAElC,IAAIF,IAAI,IAAIR,UAAU,EAAE;QACtB;QACA,MAAMW,QAAQ,GAAG,MAAMlB,KAAK,CAACmB,IAAI,CAAC,GAAGZ,UAAU,iBAAiB,EAAE,IAAI,EAAE;UACtEa,MAAM,EAAE;YAAEL;UAAK;QACjB,CAAC,CAAC;QACFM,OAAO,CAACC,GAAG,CAAC,kBAAkB,EAAEJ,QAAQ,CAACK,IAAI,CAAC;;QAE9C;QACA,IAAIL,QAAQ,CAACK,IAAI,CAACC,QAAQ,EAAE;UAC1BC,YAAY,CAACC,OAAO,CAAC,UAAU,EAAER,QAAQ,CAACK,IAAI,CAACC,QAAQ,CAAC;UACxDlB,SAAS,CAAC,SAAS,CAAC;QACtB,CAAC,MAAM;UACLA,SAAS,CAACY,QAAQ,CAACK,IAAI,CAACI,OAAO,IAAI,SAAS,CAAC;QAC/C;MACF,CAAC,MAAM;QACLN,OAAO,CAACO,KAAK,CAAC,8CAA8C,CAAC;QAC7DtB,SAAS,CAAC,8BAA8B,CAAC;MAC3C;IAEJ,CAAC;IAEDW,iBAAiB,CAAC,CAAC;EACrB,CAAC,EAAE,CAACN,QAAQ,CAACG,MAAM,EAAEP,UAAU,CAAC,CAAC;EAEjC,oBACEL,OAAA;IAAA2B,QAAA,gBACE3B,OAAA;MAAA2B,QAAA,EAAIxB;IAAM;MAAAyB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACf/B,OAAA;MAAKgC,SAAS,EAAC;IAAS;MAAAJ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC5B,CAAC;AAEV,CAAC;AAAC7B,EAAA,CAzCID,aAAa;EAAA,QAGAJ,WAAW;AAAA;AAAAoC,EAAA,GAHxBhC,aAAa;AA2CnB,eAAeA,aAAa;AAAC,IAAAgC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}